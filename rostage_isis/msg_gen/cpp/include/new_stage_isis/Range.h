/* Auto-generated by genmsg_cpp for file /home/mfcarmona/ros/isis/new_stage_isis/msg/Range.msg */
#ifndef NEW_STAGE_ISIS_MESSAGE_RANGE_H
#define NEW_STAGE_ISIS_MESSAGE_RANGE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "std_msgs/Header.h"

namespace new_stage_isis
{
template <class ContainerAllocator>
struct Range_ : public ros::Message
{
  typedef Range_<ContainerAllocator> Type;

  Range_()
  : header()
  , radiation_type(0)
  , field_of_view(0.0)
  , min_range(0.0)
  , max_range(0.0)
  , range(0.0)
  {
  }

  Range_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , radiation_type(0)
  , field_of_view(0.0)
  , min_range(0.0)
  , max_range(0.0)
  , range(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint8_t _radiation_type_type;
  uint8_t radiation_type;

  typedef float _field_of_view_type;
  float field_of_view;

  typedef float _min_range_type;
  float min_range;

  typedef float _max_range_type;
  float max_range;

  typedef float _range_type;
  float range;

  enum { ULTRASOUND = 0 };
  enum { INFRARED = 1 };

private:
  static const char* __s_getDataType_() { return "new_stage_isis/Range"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "c005c34273dc426c67a020a87bc24148"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# Single range reading from an active ranger that emits energy and reports\n\
# one range reading that is valid along an arc at the distance measured. \n\
# This message is not appropriate for fixed-range obstacle detectors, \n\
# such as the Sharp GP2D15. This message is also not appropriate for laser \n\
# scanners. See the LaserScan message if you are working with a laser scanner.\n\
\n\
Header header    	# timestamp in the header is the time the ranger\n\
		 	# returned the distance reading\n\
\n\
# Radiation type enums\n\
# If you want a value added to this list, send an email to the ros-users list\n\
uint8 ULTRASOUND=0\n\
uint8 INFRARED=1\n\
\n\
uint8 radiation_type    # the type of radiation used by the sensor\n\
		 	# (sound, IR, etc) [enum]\n\
\n\
float32 field_of_view   # the size of the arc that the distance reading is\n\
		 	# valid for [rad]\n\
		 	# the object causing the range reading may have\n\
		 	# been anywhere along -field_of_view/2 and\n\
		 	# field_of_view/2 at range. 0 angle corresponds\n\
		 	# to the x-axis of the sensor.\n\
\n\
float32 min_range       # minimum range value [m]\n\
float32 max_range       # maximum range value [m]\n\
\n\
float32 range           # range data [m]\n\
		 	# (Note: values < range_min or > range_max\n\
		 	# should be discarded)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, radiation_type);
    ros::serialization::serialize(stream, field_of_view);
    ros::serialization::serialize(stream, min_range);
    ros::serialization::serialize(stream, max_range);
    ros::serialization::serialize(stream, range);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, radiation_type);
    ros::serialization::deserialize(stream, field_of_view);
    ros::serialization::deserialize(stream, min_range);
    ros::serialization::deserialize(stream, max_range);
    ros::serialization::deserialize(stream, range);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(radiation_type);
    size += ros::serialization::serializationLength(field_of_view);
    size += ros::serialization::serializationLength(min_range);
    size += ros::serialization::serializationLength(max_range);
    size += ros::serialization::serializationLength(range);
    return size;
  }

  typedef boost::shared_ptr< ::new_stage_isis::Range_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::new_stage_isis::Range_<ContainerAllocator>  const> ConstPtr;
}; // struct Range
typedef  ::new_stage_isis::Range_<std::allocator<void> > Range;

typedef boost::shared_ptr< ::new_stage_isis::Range> RangePtr;
typedef boost::shared_ptr< ::new_stage_isis::Range const> RangeConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::new_stage_isis::Range_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::new_stage_isis::Range_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace new_stage_isis

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::new_stage_isis::Range_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c005c34273dc426c67a020a87bc24148";
  }

  static const char* value(const  ::new_stage_isis::Range_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc005c34273dc426cULL;
  static const uint64_t static_value2 = 0x67a020a87bc24148ULL;
};

template<class ContainerAllocator>
struct DataType< ::new_stage_isis::Range_<ContainerAllocator> > {
  static const char* value() 
  {
    return "new_stage_isis/Range";
  }

  static const char* value(const  ::new_stage_isis::Range_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::new_stage_isis::Range_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Single range reading from an active ranger that emits energy and reports\n\
# one range reading that is valid along an arc at the distance measured. \n\
# This message is not appropriate for fixed-range obstacle detectors, \n\
# such as the Sharp GP2D15. This message is also not appropriate for laser \n\
# scanners. See the LaserScan message if you are working with a laser scanner.\n\
\n\
Header header    	# timestamp in the header is the time the ranger\n\
		 	# returned the distance reading\n\
\n\
# Radiation type enums\n\
# If you want a value added to this list, send an email to the ros-users list\n\
uint8 ULTRASOUND=0\n\
uint8 INFRARED=1\n\
\n\
uint8 radiation_type    # the type of radiation used by the sensor\n\
		 	# (sound, IR, etc) [enum]\n\
\n\
float32 field_of_view   # the size of the arc that the distance reading is\n\
		 	# valid for [rad]\n\
		 	# the object causing the range reading may have\n\
		 	# been anywhere along -field_of_view/2 and\n\
		 	# field_of_view/2 at range. 0 angle corresponds\n\
		 	# to the x-axis of the sensor.\n\
\n\
float32 min_range       # minimum range value [m]\n\
float32 max_range       # maximum range value [m]\n\
\n\
float32 range           # range data [m]\n\
		 	# (Note: values < range_min or > range_max\n\
		 	# should be discarded)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::new_stage_isis::Range_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::new_stage_isis::Range_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::new_stage_isis::Range_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::new_stage_isis::Range_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.radiation_type);
    stream.next(m.field_of_view);
    stream.next(m.min_range);
    stream.next(m.max_range);
    stream.next(m.range);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Range_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::new_stage_isis::Range_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::new_stage_isis::Range_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "radiation_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.radiation_type);
    s << indent << "field_of_view: ";
    Printer<float>::stream(s, indent + "  ", v.field_of_view);
    s << indent << "min_range: ";
    Printer<float>::stream(s, indent + "  ", v.min_range);
    s << indent << "max_range: ";
    Printer<float>::stream(s, indent + "  ", v.max_range);
    s << indent << "range: ";
    Printer<float>::stream(s, indent + "  ", v.range);
  }
};


} // namespace message_operations
} // namespace ros

#endif // NEW_STAGE_ISIS_MESSAGE_RANGE_H

