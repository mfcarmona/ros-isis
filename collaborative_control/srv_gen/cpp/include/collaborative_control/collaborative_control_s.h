/* Auto-generated by genmsg_cpp for file /home/distaur/.fakeHome/Dropbox/tmp/isis/collaborative_control/srv/collaborative_control_s.srv */
#ifndef COLLABORATIVE_CONTROL_SERVICE_COLLABORATIVE_CONTROL_S_H
#define COLLABORATIVE_CONTROL_SERVICE_COLLABORATIVE_CONTROL_S_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Point.h"
#include "efficiency/Efficiency_m.h"
#include "geometry_msgs/Point.h"
#include "efficiency/Efficiency_m.h"


#include "geometry_msgs/Point.h"

namespace collaborative_control
{
template <class ContainerAllocator>
struct collaborative_control_sRequest_ : public ros::Message
{
  typedef collaborative_control_sRequest_<ContainerAllocator> Type;

  collaborative_control_sRequest_()
  : weigthA(0.0)
  , comandA()
  , etaA()
  , weigthB(0.0)
  , comandB()
  , etaB()
  {
  }

  collaborative_control_sRequest_(const ContainerAllocator& _alloc)
  : weigthA(0.0)
  , comandA(_alloc)
  , etaA(_alloc)
  , weigthB(0.0)
  , comandB(_alloc)
  , etaB(_alloc)
  {
  }

  typedef float _weigthA_type;
  float weigthA;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _comandA_type;
   ::geometry_msgs::Point_<ContainerAllocator>  comandA;

  typedef  ::efficiency::Efficiency_m_<ContainerAllocator>  _etaA_type;
   ::efficiency::Efficiency_m_<ContainerAllocator>  etaA;

  typedef float _weigthB_type;
  float weigthB;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _comandB_type;
   ::geometry_msgs::Point_<ContainerAllocator>  comandB;

  typedef  ::efficiency::Efficiency_m_<ContainerAllocator>  _etaB_type;
   ::efficiency::Efficiency_m_<ContainerAllocator>  etaB;


private:
  static const char* __s_getDataType_() { return "collaborative_control/collaborative_control_sRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "b8ee8ccde4e2ffbfb5bf573b14fdaa15"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "6f29b80ef1ae1821153e3c4550e43179"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 weigthA\n\
geometry_msgs/Point comandA\n\
efficiency/Efficiency_m etaA\n\
float32 weigthB\n\
geometry_msgs/Point comandB\n\
efficiency/Efficiency_m etaB\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: efficiency/Efficiency_m\n\
float32 Global\n\
float32 Safety\n\
float32 Directness\n\
float32 Smoothness\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, weigthA);
    ros::serialization::serialize(stream, comandA);
    ros::serialization::serialize(stream, etaA);
    ros::serialization::serialize(stream, weigthB);
    ros::serialization::serialize(stream, comandB);
    ros::serialization::serialize(stream, etaB);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, weigthA);
    ros::serialization::deserialize(stream, comandA);
    ros::serialization::deserialize(stream, etaA);
    ros::serialization::deserialize(stream, weigthB);
    ros::serialization::deserialize(stream, comandB);
    ros::serialization::deserialize(stream, etaB);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(weigthA);
    size += ros::serialization::serializationLength(comandA);
    size += ros::serialization::serializationLength(etaA);
    size += ros::serialization::serializationLength(weigthB);
    size += ros::serialization::serializationLength(comandB);
    size += ros::serialization::serializationLength(etaB);
    return size;
  }

  typedef boost::shared_ptr< ::collaborative_control::collaborative_control_sRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::collaborative_control::collaborative_control_sRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct collaborative_control_sRequest
typedef  ::collaborative_control::collaborative_control_sRequest_<std::allocator<void> > collaborative_control_sRequest;

typedef boost::shared_ptr< ::collaborative_control::collaborative_control_sRequest> collaborative_control_sRequestPtr;
typedef boost::shared_ptr< ::collaborative_control::collaborative_control_sRequest const> collaborative_control_sRequestConstPtr;


template <class ContainerAllocator>
struct collaborative_control_sResponse_ : public ros::Message
{
  typedef collaborative_control_sResponse_<ContainerAllocator> Type;

  collaborative_control_sResponse_()
  : comandC()
  {
  }

  collaborative_control_sResponse_(const ContainerAllocator& _alloc)
  : comandC(_alloc)
  {
  }

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _comandC_type;
   ::geometry_msgs::Point_<ContainerAllocator>  comandC;


private:
  static const char* __s_getDataType_() { return "collaborative_control/collaborative_control_sResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0f200156ab0eb42d7915c776a70ef7bc"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "6f29b80ef1ae1821153e3c4550e43179"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "geometry_msgs/Point comandC\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, comandC);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, comandC);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(comandC);
    return size;
  }

  typedef boost::shared_ptr< ::collaborative_control::collaborative_control_sResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::collaborative_control::collaborative_control_sResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct collaborative_control_sResponse
typedef  ::collaborative_control::collaborative_control_sResponse_<std::allocator<void> > collaborative_control_sResponse;

typedef boost::shared_ptr< ::collaborative_control::collaborative_control_sResponse> collaborative_control_sResponsePtr;
typedef boost::shared_ptr< ::collaborative_control::collaborative_control_sResponse const> collaborative_control_sResponseConstPtr;

struct collaborative_control_s
{

typedef collaborative_control_sRequest Request;
typedef collaborative_control_sResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct collaborative_control_s
} // namespace collaborative_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::collaborative_control::collaborative_control_sRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b8ee8ccde4e2ffbfb5bf573b14fdaa15";
  }

  static const char* value(const  ::collaborative_control::collaborative_control_sRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb8ee8ccde4e2ffbfULL;
  static const uint64_t static_value2 = 0xb5bf573b14fdaa15ULL;
};

template<class ContainerAllocator>
struct DataType< ::collaborative_control::collaborative_control_sRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "collaborative_control/collaborative_control_sRequest";
  }

  static const char* value(const  ::collaborative_control::collaborative_control_sRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::collaborative_control::collaborative_control_sRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 weigthA\n\
geometry_msgs/Point comandA\n\
efficiency/Efficiency_m etaA\n\
float32 weigthB\n\
geometry_msgs/Point comandB\n\
efficiency/Efficiency_m etaB\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: efficiency/Efficiency_m\n\
float32 Global\n\
float32 Safety\n\
float32 Directness\n\
float32 Smoothness\n\
\n\
\n\
";
  }

  static const char* value(const  ::collaborative_control::collaborative_control_sRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::collaborative_control::collaborative_control_sRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::collaborative_control::collaborative_control_sResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0f200156ab0eb42d7915c776a70ef7bc";
  }

  static const char* value(const  ::collaborative_control::collaborative_control_sResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0f200156ab0eb42dULL;
  static const uint64_t static_value2 = 0x7915c776a70ef7bcULL;
};

template<class ContainerAllocator>
struct DataType< ::collaborative_control::collaborative_control_sResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "collaborative_control/collaborative_control_sResponse";
  }

  static const char* value(const  ::collaborative_control::collaborative_control_sResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::collaborative_control::collaborative_control_sResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Point comandC\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::collaborative_control::collaborative_control_sResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::collaborative_control::collaborative_control_sResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::collaborative_control::collaborative_control_sRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.weigthA);
    stream.next(m.comandA);
    stream.next(m.etaA);
    stream.next(m.weigthB);
    stream.next(m.comandB);
    stream.next(m.etaB);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct collaborative_control_sRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::collaborative_control::collaborative_control_sResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.comandC);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct collaborative_control_sResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<collaborative_control::collaborative_control_s> {
  static const char* value() 
  {
    return "6f29b80ef1ae1821153e3c4550e43179";
  }

  static const char* value(const collaborative_control::collaborative_control_s&) { return value(); } 
};

template<>
struct DataType<collaborative_control::collaborative_control_s> {
  static const char* value() 
  {
    return "collaborative_control/collaborative_control_s";
  }

  static const char* value(const collaborative_control::collaborative_control_s&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<collaborative_control::collaborative_control_sRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6f29b80ef1ae1821153e3c4550e43179";
  }

  static const char* value(const collaborative_control::collaborative_control_sRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<collaborative_control::collaborative_control_sRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "collaborative_control/collaborative_control_s";
  }

  static const char* value(const collaborative_control::collaborative_control_sRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<collaborative_control::collaborative_control_sResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6f29b80ef1ae1821153e3c4550e43179";
  }

  static const char* value(const collaborative_control::collaborative_control_sResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<collaborative_control::collaborative_control_sResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "collaborative_control/collaborative_control_s";
  }

  static const char* value(const collaborative_control::collaborative_control_sResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // COLLABORATIVE_CONTROL_SERVICE_COLLABORATIVE_CONTROL_S_H

