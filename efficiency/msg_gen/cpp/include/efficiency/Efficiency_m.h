/* Auto-generated by genmsg_cpp for file /home/mfcarmona/ros/isis/efficiency/msg/Efficiency_m.msg */
#ifndef EFFICIENCY_MESSAGE_EFFICIENCY_M_H
#define EFFICIENCY_MESSAGE_EFFICIENCY_M_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace efficiency
{
template <class ContainerAllocator>
struct Efficiency_m_ : public ros::Message
{
  typedef Efficiency_m_<ContainerAllocator> Type;

  Efficiency_m_()
  : Global(0.0)
  , Safety(0.0)
  , Directness(0.0)
  , Smoothness(0.0)
  {
  }

  Efficiency_m_(const ContainerAllocator& _alloc)
  : Global(0.0)
  , Safety(0.0)
  , Directness(0.0)
  , Smoothness(0.0)
  {
  }

  typedef float _Global_type;
  float Global;

  typedef float _Safety_type;
  float Safety;

  typedef float _Directness_type;
  float Directness;

  typedef float _Smoothness_type;
  float Smoothness;


private:
  static const char* __s_getDataType_() { return "efficiency/Efficiency_m"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0c310688c11a3495d825779498ee3fd4"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 Global\n\
float32 Safety\n\
float32 Directness\n\
float32 Smoothness\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, Global);
    ros::serialization::serialize(stream, Safety);
    ros::serialization::serialize(stream, Directness);
    ros::serialization::serialize(stream, Smoothness);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, Global);
    ros::serialization::deserialize(stream, Safety);
    ros::serialization::deserialize(stream, Directness);
    ros::serialization::deserialize(stream, Smoothness);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(Global);
    size += ros::serialization::serializationLength(Safety);
    size += ros::serialization::serializationLength(Directness);
    size += ros::serialization::serializationLength(Smoothness);
    return size;
  }

  typedef boost::shared_ptr< ::efficiency::Efficiency_m_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::efficiency::Efficiency_m_<ContainerAllocator>  const> ConstPtr;
}; // struct Efficiency_m
typedef  ::efficiency::Efficiency_m_<std::allocator<void> > Efficiency_m;

typedef boost::shared_ptr< ::efficiency::Efficiency_m> Efficiency_mPtr;
typedef boost::shared_ptr< ::efficiency::Efficiency_m const> Efficiency_mConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::efficiency::Efficiency_m_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::efficiency::Efficiency_m_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace efficiency

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::efficiency::Efficiency_m_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0c310688c11a3495d825779498ee3fd4";
  }

  static const char* value(const  ::efficiency::Efficiency_m_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0c310688c11a3495ULL;
  static const uint64_t static_value2 = 0xd825779498ee3fd4ULL;
};

template<class ContainerAllocator>
struct DataType< ::efficiency::Efficiency_m_<ContainerAllocator> > {
  static const char* value() 
  {
    return "efficiency/Efficiency_m";
  }

  static const char* value(const  ::efficiency::Efficiency_m_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::efficiency::Efficiency_m_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 Global\n\
float32 Safety\n\
float32 Directness\n\
float32 Smoothness\n\
\n\
\n\
";
  }

  static const char* value(const  ::efficiency::Efficiency_m_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::efficiency::Efficiency_m_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::efficiency::Efficiency_m_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Global);
    stream.next(m.Safety);
    stream.next(m.Directness);
    stream.next(m.Smoothness);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Efficiency_m_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::efficiency::Efficiency_m_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::efficiency::Efficiency_m_<ContainerAllocator> & v) 
  {
    s << indent << "Global: ";
    Printer<float>::stream(s, indent + "  ", v.Global);
    s << indent << "Safety: ";
    Printer<float>::stream(s, indent + "  ", v.Safety);
    s << indent << "Directness: ";
    Printer<float>::stream(s, indent + "  ", v.Directness);
    s << indent << "Smoothness: ";
    Printer<float>::stream(s, indent + "  ", v.Smoothness);
  }
};


} // namespace message_operations
} // namespace ros

#endif // EFFICIENCY_MESSAGE_EFFICIENCY_M_H

