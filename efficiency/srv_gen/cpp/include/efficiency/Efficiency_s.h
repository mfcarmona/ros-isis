/* Auto-generated by genmsg_cpp for file /home/mfcarmona/ros/isis/efficiency/srv/Efficiency_s.srv */
#ifndef EFFICIENCY_SERVICE_EFFICIENCY_S_H
#define EFFICIENCY_SERVICE_EFFICIENCY_S_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Point.h"
#include "nav_msgs/Odometry.h"
#include "sensor_msgs/LaserScan.h"
#include "geometry_msgs/Pose2D.h"


#include "efficiency/Efficiency_m.h"

namespace efficiency
{
template <class ContainerAllocator>
struct Efficiency_sRequest_ : public ros::Message
{
  typedef Efficiency_sRequest_<ContainerAllocator> Type;

  Efficiency_sRequest_()
  : comand()
  , robotPos()
  , currScan()
  , target()
  {
  }

  Efficiency_sRequest_(const ContainerAllocator& _alloc)
  : comand(_alloc)
  , robotPos(_alloc)
  , currScan(_alloc)
  , target(_alloc)
  {
  }

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _comand_type;
   ::geometry_msgs::Point_<ContainerAllocator>  comand;

  typedef  ::nav_msgs::Odometry_<ContainerAllocator>  _robotPos_type;
   ::nav_msgs::Odometry_<ContainerAllocator>  robotPos;

  typedef  ::sensor_msgs::LaserScan_<ContainerAllocator>  _currScan_type;
   ::sensor_msgs::LaserScan_<ContainerAllocator>  currScan;

  typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _target_type;
   ::geometry_msgs::Pose2D_<ContainerAllocator>  target;


private:
  static const char* __s_getDataType_() { return "efficiency/Efficiency_sRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0b7d8860a8c89d81c881071b1c6a9edf"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "a59fddec67f299eed7e9e7e8a52018f8"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "geometry_msgs/Point comand\n\
nav_msgs/Odometry robotPos\n\
sensor_msgs/LaserScan currScan\n\
geometry_msgs/Pose2D target\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: nav_msgs/Odometry\n\
# This represents an estimate of a position and velocity in free space.  \n\
# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n\
# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n\
Header header\n\
string child_frame_id\n\
geometry_msgs/PoseWithCovariance pose\n\
geometry_msgs/TwistWithCovariance twist\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TwistWithCovariance\n\
# This expresses velocity in free space with uncertianty.\n\
\n\
Twist twist\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into it's linear and angular parts. \n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: sensor_msgs/LaserScan\n\
# Single scan from a planar laser range-finder\n\
#\n\
# If you have another ranging device with different behavior (e.g. a sonar\n\
# array), please find or create a different message, since applications\n\
# will make fairly laser-specific assumptions about this data\n\
\n\
Header header            # timestamp in the header is the acquisition time of \n\
                         # the first ray in the scan.\n\
                         #\n\
                         # in frame frame_id, angles are measured around \n\
                         # the positive Z axis (counterclockwise, if Z is up)\n\
                         # with zero angle being forward along the x axis\n\
                         \n\
float32 angle_min        # start angle of the scan [rad]\n\
float32 angle_max        # end angle of the scan [rad]\n\
float32 angle_increment  # angular distance between measurements [rad]\n\
\n\
float32 time_increment   # time between measurements [seconds] - if your scanner\n\
                         # is moving, this will be used in interpolating position\n\
                         # of 3d points\n\
float32 scan_time        # time between scans [seconds]\n\
\n\
float32 range_min        # minimum range value [m]\n\
float32 range_max        # maximum range value [m]\n\
\n\
float32[] ranges         # range data [m] (Note: values < range_min or > range_max should be discarded)\n\
float32[] intensities    # intensity data [device-specific units].  If your\n\
                         # device does not provide intensities, please leave\n\
                         # the array empty.\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, comand);
    ros::serialization::serialize(stream, robotPos);
    ros::serialization::serialize(stream, currScan);
    ros::serialization::serialize(stream, target);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, comand);
    ros::serialization::deserialize(stream, robotPos);
    ros::serialization::deserialize(stream, currScan);
    ros::serialization::deserialize(stream, target);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(comand);
    size += ros::serialization::serializationLength(robotPos);
    size += ros::serialization::serializationLength(currScan);
    size += ros::serialization::serializationLength(target);
    return size;
  }

  typedef boost::shared_ptr< ::efficiency::Efficiency_sRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::efficiency::Efficiency_sRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct Efficiency_sRequest
typedef  ::efficiency::Efficiency_sRequest_<std::allocator<void> > Efficiency_sRequest;

typedef boost::shared_ptr< ::efficiency::Efficiency_sRequest> Efficiency_sRequestPtr;
typedef boost::shared_ptr< ::efficiency::Efficiency_sRequest const> Efficiency_sRequestConstPtr;


template <class ContainerAllocator>
struct Efficiency_sResponse_ : public ros::Message
{
  typedef Efficiency_sResponse_<ContainerAllocator> Type;

  Efficiency_sResponse_()
  : eta()
  {
  }

  Efficiency_sResponse_(const ContainerAllocator& _alloc)
  : eta(_alloc)
  {
  }

  typedef  ::efficiency::Efficiency_m_<ContainerAllocator>  _eta_type;
   ::efficiency::Efficiency_m_<ContainerAllocator>  eta;


private:
  static const char* __s_getDataType_() { return "efficiency/Efficiency_sResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "5e6f934f07b7f4fd2e0fe69b58994708"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "a59fddec67f299eed7e9e7e8a52018f8"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "Efficiency_m eta\n\
\n\
\n\
\n\
================================================================================\n\
MSG: efficiency/Efficiency_m\n\
float32 Global\n\
float32 Safety\n\
float32 Directness\n\
float32 Smoothness\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, eta);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, eta);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(eta);
    return size;
  }

  typedef boost::shared_ptr< ::efficiency::Efficiency_sResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::efficiency::Efficiency_sResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct Efficiency_sResponse
typedef  ::efficiency::Efficiency_sResponse_<std::allocator<void> > Efficiency_sResponse;

typedef boost::shared_ptr< ::efficiency::Efficiency_sResponse> Efficiency_sResponsePtr;
typedef boost::shared_ptr< ::efficiency::Efficiency_sResponse const> Efficiency_sResponseConstPtr;

struct Efficiency_s
{

typedef Efficiency_sRequest Request;
typedef Efficiency_sResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Efficiency_s
} // namespace efficiency

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::efficiency::Efficiency_sRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0b7d8860a8c89d81c881071b1c6a9edf";
  }

  static const char* value(const  ::efficiency::Efficiency_sRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0b7d8860a8c89d81ULL;
  static const uint64_t static_value2 = 0xc881071b1c6a9edfULL;
};

template<class ContainerAllocator>
struct DataType< ::efficiency::Efficiency_sRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "efficiency/Efficiency_sRequest";
  }

  static const char* value(const  ::efficiency::Efficiency_sRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::efficiency::Efficiency_sRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Point comand\n\
nav_msgs/Odometry robotPos\n\
sensor_msgs/LaserScan currScan\n\
geometry_msgs/Pose2D target\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: nav_msgs/Odometry\n\
# This represents an estimate of a position and velocity in free space.  \n\
# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n\
# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n\
Header header\n\
string child_frame_id\n\
geometry_msgs/PoseWithCovariance pose\n\
geometry_msgs/TwistWithCovariance twist\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TwistWithCovariance\n\
# This expresses velocity in free space with uncertianty.\n\
\n\
Twist twist\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into it's linear and angular parts. \n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: sensor_msgs/LaserScan\n\
# Single scan from a planar laser range-finder\n\
#\n\
# If you have another ranging device with different behavior (e.g. a sonar\n\
# array), please find or create a different message, since applications\n\
# will make fairly laser-specific assumptions about this data\n\
\n\
Header header            # timestamp in the header is the acquisition time of \n\
                         # the first ray in the scan.\n\
                         #\n\
                         # in frame frame_id, angles are measured around \n\
                         # the positive Z axis (counterclockwise, if Z is up)\n\
                         # with zero angle being forward along the x axis\n\
                         \n\
float32 angle_min        # start angle of the scan [rad]\n\
float32 angle_max        # end angle of the scan [rad]\n\
float32 angle_increment  # angular distance between measurements [rad]\n\
\n\
float32 time_increment   # time between measurements [seconds] - if your scanner\n\
                         # is moving, this will be used in interpolating position\n\
                         # of 3d points\n\
float32 scan_time        # time between scans [seconds]\n\
\n\
float32 range_min        # minimum range value [m]\n\
float32 range_max        # maximum range value [m]\n\
\n\
float32[] ranges         # range data [m] (Note: values < range_min or > range_max should be discarded)\n\
float32[] intensities    # intensity data [device-specific units].  If your\n\
                         # device does not provide intensities, please leave\n\
                         # the array empty.\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const  ::efficiency::Efficiency_sRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::efficiency::Efficiency_sResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5e6f934f07b7f4fd2e0fe69b58994708";
  }

  static const char* value(const  ::efficiency::Efficiency_sResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5e6f934f07b7f4fdULL;
  static const uint64_t static_value2 = 0x2e0fe69b58994708ULL;
};

template<class ContainerAllocator>
struct DataType< ::efficiency::Efficiency_sResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "efficiency/Efficiency_sResponse";
  }

  static const char* value(const  ::efficiency::Efficiency_sResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::efficiency::Efficiency_sResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Efficiency_m eta\n\
\n\
\n\
\n\
================================================================================\n\
MSG: efficiency/Efficiency_m\n\
float32 Global\n\
float32 Safety\n\
float32 Directness\n\
float32 Smoothness\n\
\n\
\n\
";
  }

  static const char* value(const  ::efficiency::Efficiency_sResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::efficiency::Efficiency_sResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::efficiency::Efficiency_sRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.comand);
    stream.next(m.robotPos);
    stream.next(m.currScan);
    stream.next(m.target);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Efficiency_sRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::efficiency::Efficiency_sResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.eta);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Efficiency_sResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<efficiency::Efficiency_s> {
  static const char* value() 
  {
    return "a59fddec67f299eed7e9e7e8a52018f8";
  }

  static const char* value(const efficiency::Efficiency_s&) { return value(); } 
};

template<>
struct DataType<efficiency::Efficiency_s> {
  static const char* value() 
  {
    return "efficiency/Efficiency_s";
  }

  static const char* value(const efficiency::Efficiency_s&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<efficiency::Efficiency_sRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a59fddec67f299eed7e9e7e8a52018f8";
  }

  static const char* value(const efficiency::Efficiency_sRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<efficiency::Efficiency_sRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "efficiency/Efficiency_s";
  }

  static const char* value(const efficiency::Efficiency_sRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<efficiency::Efficiency_sResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a59fddec67f299eed7e9e7e8a52018f8";
  }

  static const char* value(const efficiency::Efficiency_sResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<efficiency::Efficiency_sResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "efficiency/Efficiency_s";
  }

  static const char* value(const efficiency::Efficiency_sResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // EFFICIENCY_SERVICE_EFFICIENCY_S_H

