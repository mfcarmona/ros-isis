# Modificado para controlar CARMEN

#For full documentation of the parameters in this file, and a list of all the
#parameters available for TrajectoryPlannerROS, please see
#http://www.ros.org/wiki/base_local_planner

#---------------------------------------------------
#       Robot Configuration Parameters              |
#---------------------------------------------------
acc_lim_x:                   2.5 #(double, default: 2.5) The x acceleration limit of the robot in meters/sec^2 
acc_lim_y:                   0   #(double, default: 2.5) The y acceleration limit of the robot in meters/sec^2 
acc_lim_th:                  1   #(double, default: 3.2) The rotational acceleration limit of the robot in radians/sec^2 
max_vel_x:                   0.9 #(double, default: 0.5) The maximum forward velocity allowed for the base in meters/sec 
min_vel_x:                   0.1 #(double, default: 0.1)  The minimum forward velocity allowed for the base in meters/sec. Allow the base to overcome friction. 
max_rotational_vel:          1.0 #(double, default: 1.0) The maximum rotational velocity allowed for the base in radians/sec 
min_in_place_rotational_vel: 0.3 #(double, default: 0.4) The minimum rotational velocity allowed for the base while performing in-place rotations in radians/sec 
#backup_vel:  (use escape_vel)
escape_vel:                 -0.1 #(double, default: -0.1) Speed in escapes in meters/sec. Must be negative to reverse.
holonomic_robot:           false #(bool, default: true) Velocity commands are generated for a (non)-holonomic robot == strafing velocity commands are issued (or not)

#---------------------------------------------------
# parameters if holonomic_robot == true             |
#--------------------------------------------------- 
#y_vels:   #(list, default: [-0.3, -0.1, 0.1, 0.3]) The strafing velocities that a holonomic robot will consider in meters/sec 

#---------------------------------------------------
#        Goal Tolerance Parameters                 |
#---------------------------------------------------
yaw_goal_tolerance:        1.05  #(double, default: 0.05) The tolerance in radians for the controller in yaw/rotation when achieving its goal 
xy_goal_tolerance:         0.5   #(double, default: 0.10) The tolerance in meters for the controller in the x & y distance when achieving a goal 
latch_xy_goal_tolerance:  false  #(bool, default: false) If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place,

#---------------------------------------------------
#   Forward Simulation Parameters                  |
#---------------------------------------------------
#sim_time:                1.0   #(double, default: 1.0) The amount of time to forward-simulate trajectories in seconds 
#sim_granularity:         0.025 #(double, default: 0.025) The step size, in meters, to take between points on a given trajectory 
#angular_sim_granularity: 0.025 #(double, default: sim_granularity) The step size, in radians, to take between angular samples on a given trajectory.
#vx_samples:              3     #(integer, default: 3) The number of samples to use when exploring the x velocity space 
#vtheta_samples:         20     #(integer, default: 20) The number of samples to use when exploring the theta velocity space 
#controller_frequency:   10     #(double, default: 20.0) controller call frequence in Hz. 

#---------------------------------------------------
#    Trajectory Scoring Parameters                 |
#---------------------------------------------------

#cost_function =   path_distance_bias *  (distance to path from the endpoint of the trajectory in map cells or meters depending on the meter_scoring parameter) 
#                + goal_distance_bias *  (distance to local goal from the endpoint of the trajectory in map cells or meters depending on the meter_scoring parameter) 
#                + occdist_scale *  (maximum obstacle cost along the trajectory in obstacle cost  (0-254))

meter_scoring:            false #(bool, default: false) goal_distance and path_distance are expressed in units of meters or cells . (cells by default)
path_distance_bias:       0.6   #(double, default: 0.6) The weighting for how much the controller should stay close to the path it was given 
goal_distance_bias:       0.8   #(double, default: 0.8) The weighting for how much the controller should attempt to reach its local goal, also controls speed 
occdist_scale:            0.01  #(double, default: 0.01) The weighting for how much the controller should attempt to avoid obstacles 
heading_lookahead:        0.325 #(double, default: 0.325) How far to look ahead in meters when scoring different in-place-rotation trajectories 
heading_scoring:          false #(bool, default: false) Whether to score based on the robot's heading to the path or its distance from the path 
heading_scoring_timestep: 0.8   #(double, default: 0.8) How far to look ahead in time in seconds along the simulated trajectory when using heading scoring 
dwa:                      true  #(bool, default: true) Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout
publish_cost_grid_pc:     true #(bool, default: false) When true, a sensor_msgs/PointCloud2 will be available. Each point cloud represents the cost grid and has a field for each individual scoring function component as well as the overall cost for each cell, taking the scoring parameters into account.
global_frame_id:          /map  #(string, default: odom) Frame for cost_cloud. Should be set to the same frame as the local costmap's global frame.

#---------------------------------------------------
#  Oscillation Prevention Parameters               |
#---------------------------------------------------
oscillation_reset_dist:   0.05 #(double, default: 0.05) How far the robot must travel in meters before oscillation flags are reset 

#---------------------------------------------------
# Global Plan Parameters                           |
#---------------------------------------------------
prune_plan: true  #(bool, default: true) Eat up the plan as the robot moves along the path, falling  off the end of the plan once the robot moves 1 meter past them.

